// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/benchmark/benchmark.proto

package benchmark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BenchmarkService_Hello_FullMethodName           = "/benchmark.BenchmarkService/Hello"
	BenchmarkService_CPUIntensive_FullMethodName    = "/benchmark.BenchmarkService/CPUIntensive"
	BenchmarkService_MemoryIntensive_FullMethodName = "/benchmark.BenchmarkService/MemoryIntensive"
	BenchmarkService_DiskIO_FullMethodName          = "/benchmark.BenchmarkService/DiskIO"
	BenchmarkService_Mixed_FullMethodName           = "/benchmark.BenchmarkService/Mixed"
)

// BenchmarkServiceClient is the client API for BenchmarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	CPUIntensive(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
	MemoryIntensive(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error)
	DiskIO(ctx context.Context, in *IORequest, opts ...grpc.CallOption) (*IOResponse, error)
	Mixed(ctx context.Context, in *MixedRequest, opts ...grpc.CallOption) (*MixedResponse, error)
}

type benchmarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkServiceClient(cc grpc.ClientConnInterface) BenchmarkServiceClient {
	return &benchmarkServiceClient{cc}
}

func (c *benchmarkServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) CPUIntensive(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComputeResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_CPUIntensive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) MemoryIntensive(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemoryResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_MemoryIntensive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) DiskIO(ctx context.Context, in *IORequest, opts ...grpc.CallOption) (*IOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IOResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_DiskIO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) Mixed(ctx context.Context, in *MixedRequest, opts ...grpc.CallOption) (*MixedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MixedResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_Mixed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkServiceServer is the server API for BenchmarkService service.
// All implementations must embed UnimplementedBenchmarkServiceServer
// for forward compatibility.
type BenchmarkServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	CPUIntensive(context.Context, *ComputeRequest) (*ComputeResponse, error)
	MemoryIntensive(context.Context, *MemoryRequest) (*MemoryResponse, error)
	DiskIO(context.Context, *IORequest) (*IOResponse, error)
	Mixed(context.Context, *MixedRequest) (*MixedResponse, error)
	mustEmbedUnimplementedBenchmarkServiceServer()
}

// UnimplementedBenchmarkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBenchmarkServiceServer struct{}

func (UnimplementedBenchmarkServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedBenchmarkServiceServer) CPUIntensive(context.Context, *ComputeRequest) (*ComputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPUIntensive not implemented")
}
func (UnimplementedBenchmarkServiceServer) MemoryIntensive(context.Context, *MemoryRequest) (*MemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemoryIntensive not implemented")
}
func (UnimplementedBenchmarkServiceServer) DiskIO(context.Context, *IORequest) (*IOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskIO not implemented")
}
func (UnimplementedBenchmarkServiceServer) Mixed(context.Context, *MixedRequest) (*MixedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mixed not implemented")
}
func (UnimplementedBenchmarkServiceServer) mustEmbedUnimplementedBenchmarkServiceServer() {}
func (UnimplementedBenchmarkServiceServer) testEmbeddedByValue()                          {}

// UnsafeBenchmarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkServiceServer will
// result in compilation errors.
type UnsafeBenchmarkServiceServer interface {
	mustEmbedUnimplementedBenchmarkServiceServer()
}

func RegisterBenchmarkServiceServer(s grpc.ServiceRegistrar, srv BenchmarkServiceServer) {
	// If the following call pancis, it indicates UnimplementedBenchmarkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BenchmarkService_ServiceDesc, srv)
}

func _BenchmarkService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_CPUIntensive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).CPUIntensive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_CPUIntensive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).CPUIntensive(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_MemoryIntensive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).MemoryIntensive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_MemoryIntensive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).MemoryIntensive(ctx, req.(*MemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_DiskIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).DiskIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_DiskIO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).DiskIO(ctx, req.(*IORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_Mixed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MixedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).Mixed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_Mixed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).Mixed(ctx, req.(*MixedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BenchmarkService_ServiceDesc is the grpc.ServiceDesc for BenchmarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchmarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "benchmark.BenchmarkService",
	HandlerType: (*BenchmarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _BenchmarkService_Hello_Handler,
		},
		{
			MethodName: "CPUIntensive",
			Handler:    _BenchmarkService_CPUIntensive_Handler,
		},
		{
			MethodName: "MemoryIntensive",
			Handler:    _BenchmarkService_MemoryIntensive_Handler,
		},
		{
			MethodName: "DiskIO",
			Handler:    _BenchmarkService_DiskIO_Handler,
		},
		{
			MethodName: "Mixed",
			Handler:    _BenchmarkService_Mixed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/benchmark/benchmark.proto",
}
